"""
문제 :
- 8*8 크기의 2차원 배열에서 주어진 위치에 따라 나이트가 이동가능한 경우의 수
- 주어진 배열의 범위를 벗어나면 안된다
- 나이트의 이동경로 - 오오위,오오밑,왼왼위,왼왼밑,위위오,위위왼,밑밑오,밑밑왼(8가지의 방향)
- 입력은 문자열로 소문자 알파벳(열)과 숫자(행)으로 이루어진다
- 풀이 : 문자열의 각 원소를 행과 열로 표현한다( 이때, 문자는 아스키코드를 통해 정수로 변환할 수 있다 )
         나이트의 이동경로를 방향벡터로 표현하고 이에 따른 좌표이동을 통해 가능여부를 판단한다
"""
#입력
place = input()

#풀이1. 문자열의 각 원소를 행과열로 구분한다
#알파벳으로 표현된 열은 ord() 함수를 통해 아스키코드로 변환후, 정수로 변환한다
#해당 아스키코드가 어떤 것인지 모르기 때문에 시작점인 a의 아스키코드를 빼준다
#결과적으로 +1을 해주면 시작점 1을 잘 표현할 수 있다
x = int(place[1])
y = int(ord(place[0])) - int(ord('a')) + 1

#풀이2. 나이트의 이동가능 경로에 따라 좌표의 이동을 리스트로 나타낸다
dx = [-1,1,-1,1,-2,-2,2,2]
dy = [2,2,-2,-2,1,-1,1,-1]
directions = [0,1,2,3,4,5,6,7]

count = 0

for d in directions:
  if 1<=x+dx[d]<=8 and 1<=y+dy[d]<=8:
    count += 1

#출력
print(count)